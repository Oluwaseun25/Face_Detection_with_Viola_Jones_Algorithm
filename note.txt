STEPS FOR CREATING PERSONALIZED FACE DETECTION APP
---------------------------------------------------

1. Import neccessary libraries
- cv2: cv2 is the OpenCV library, which is used for image and video processing
- Streamlit: streamlit is a library for building interactive web applications with Python.


2. Load the face cascade classifier
- Face cascade classifier is a machine learning algorithm used for object detection, particularly for detecting human faces in images or videos. It uses a trained model based on the Haar-like features to identify regions in an image that likely contain a face. 
- It is a pre-trained model that can be used to detect faces in images and videos. 


3. Create a function to capture frames from the webcam and detect faces
- The detect_faces() function captures frames from the webcam and detects faces in the frames.
- It first initializes the webcam using cv2.VideoCapture().
- It then reads frames from the webcam using cap.read(), converts them to grayscale using cv2.cvtColor(), and detects faces using the face_cascade.detectMultiScale() method.
- The scaleFactor and minNeighbors parameters of the detectMultiScale() method control the sensitivity and accuracy of the face detection.
- Once faces are detected, the function draws rectangles around them using cv2.rectangle().
- The function then displays the frames with the detected faces using cv2.imshow().
- The function exits the loop and releases the webcam and all windows when the user presses the 'q' key.


4. Define the Streamlit app
- The app() function defines the Streamlit application.
- It sets the title of the app and adds a message prompting the user to press a button to start detecting faces from their webcam. 
- When the user presses the button, the detect_faces() function is called.


PARAMETERS EXPLANTION 
---------------------

* ret, frame = cap.read():
- ret is a boolean variable that indicates whether a frame was successfully read from the video stream. 
- ret will be True if a frame is read successfully and False if there are no more frames to read.
- Frame represents the actual image frame that was read from the video stream. 
- The Frame is a NumPy array containing the pixel values of the image.


*face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5) for detecting the face using the face cascade classifier:
- scaleFactor parameter specifies how much the image size is reduced at each image scale.
- minNeighbors: Parameter specifying how many neighbors each candidate rectangle should have to retain it. 
- Higher values of Neighbors result in fewer detections but with higher quality.


*for (x, y, w, h) in faces: for drawig rectangle around detected faces.
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)*
- (0, 255,0): The color of the rectangle in BGR format. Here, it represents green (0, 255, 0).
- (x,y): The coordinates of the top-left corner of the rectangle (the starting point).
- (x + w, y + h): The coordinates of the bottom-right corner of the rectangle (the ending point).
- 2: The thickness of the rectangle's border in pixels.


*The Viola-Jones algorithm*: 
- It is a popular object detection framework used for real-time face detection. 
- It is based on machine learning techniques and uses Haar-like features to identify objects within images or videos efficiently.*
- It is popular because of its accuracy and speed. 

* Face cascade classifier is a machine learning algorithm used for object detection, particularly for detecting human faces in images or videos.

*Haar-like Features*: 
- Patterns of pixel intensity that the classifier uses to differentiate between regions of an image that contain a face and those that do not.

* 'haarcascade_frontalface_default.xml' file*:
-  It is a pre-trained Haar cascade classifier model for frontal face detection.
-  This file is commonly used for face detection tasks in computer vision applications.
-  It contains the trained model data for detecting frontal faces using Haar-like features.